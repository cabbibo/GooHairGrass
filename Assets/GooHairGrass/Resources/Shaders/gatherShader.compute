
#pragma kernel CSMain
 
// values to add
RWStructuredBuffer<float4> floatBuffer;

// out value
RWStructuredBuffer<float4> gatherBuffer;



// immulated local atomics cant work in if / for
// because of frozen threads
//	  float acc = 0.0f;

//	  GroupMemoryBarrierWithGroupSync();
#define NR_THREADS 256

#include "Chunks/interlockedAddFunctions.cginc"

void interlockedClosestLength(float2 value , int threadid ){

  accumVal[threadid].zw = value;

  // accumulate a bit in parralel
  GroupMemoryBarrierWithGroupSync();
  if((threadid&0x3)==0){

    float2 fVal = float2(10000,1000000);

    for( int i = 0; i < 4; i++){
      float2 v = accumVal[threadid + i ].zw;
      if( v.x < fVal.x ){
        fVal = v;
      }
    }

    accumVal[threadid+0].zw = fVal;

  }
  GroupMemoryBarrierWithGroupSync();
  if(threadid==0){
    float2 result = accumVal[0].zw;
    for(int i=4; i<NR_THREADS; i+=0x4){ 
      if( accumVal[i].x < result.x ){
        result = accumVal[i].zw;
      } 

    }
    interlockedFullValue.zw = result;
  } 
  GroupMemoryBarrierWithGroupSync();
  
}



[numthreads(NR_THREADS,1,1)]
void CSMain (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {
  
  resetValue( threadID );
  //int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  int pID = threadID;


  interlockedAddFloat4( floatBuffer[threadID] , threadID );

  //interlockedClosestLength( floatBuffer[threadID].zw , threadID);

  if( threadID == 0 ){
  	gatherBuffer[ 0 ] = interlockedFullValue;
  }


}